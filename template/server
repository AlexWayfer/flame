#!/usr/bin/env ruby

# frozen_string_literal: true

require 'shellwords'
require 'yaml'

## Functons
def show_usage
	puts <<~USAGE
		Usage: ./server COMMAND
		COMMAND is one of:
		    start - Start server
		     stop - Stop server
		     kill - Kill server (and filewatcher)
		  restart - Restart server
		  monitor - Show log
		    devel - Restart and monitor server
	USAGE
end

def bash(command)
	puts command
	system bash_command(command)
end

def bash_command(command)
	escaped_command = Shellwords.escape(command)
	"bash -c #{escaped_command}"
end

def bash_spawn(command)
	puts "spawn #{command}"
	spawn bash_command(command)
end

def server(command)
	exit if %i[start restart].include?(command) && !(bundle_check && assets_build)
	web_server(command)
end

def web_server(command)
	pumactl_command = "bundle exec pumactl #{command} -F #{puma_config_file}"
	if environment == 'production' || command != :restart
		waiting_mailing_lock if %i[stop restart].include?(command)
		return bash pumactl_command
	end
	development_restart pumactl_command
end

def development_restart(pumactl_command)
	filewatchers_pids = development_filewatchers(pumactl_command)
		.map { |command| bash_spawn command }
	web_server :stop if File.exist? puma_pid_file
	web_server :start
rescue SystemExit, Interrupt
	filewatchers_pids.each do |filewatcher_pid|
		bash "kill #{filewatcher_pid}"
	end
end

def filewatcher_command(pattern, execute, exclude: nil)
	<<-CMD.split.join(' ')
		bundle exec "
			filewatcher -r
				'#{pattern}'
				#{"--exclude '#{exclude}'" unless exclude.nil?}
				'#{execute}'
		"
	CMD
end

def development_filewatchers(pumactl_command)
	[
		server_filewatcher(pumactl_command),
		assets_filewatcher
	].compact
end

def server_filewatcher(pumactl_command)
	filewatcher_command(
		'**/{Gemfile,*.{rb,ru,yml},_colors.scss}',
		pumactl_command,
		exclude: '**/{spec/**/*,config/**/*.example*}'
	)
end

ASSETS_DIR = 'assets'

def assets_filewatcher
	return unless Dir.exist?(ASSETS_DIR)
	filewatcher_command("#{ASSETS_DIR}/**/*", 'rake assets:build')
end

def server_config
	@server_config ||= YAML.load_file(File.join(__dir__, 'config', 'server.yml'))
end

def puma_config_file
	@puma_config_file ||= File.join(__dir__, 'config', 'puma.rb')
end

def puma_pid_file
	File.join(
		__dir__, *server_config[environment].values_at(:pids_dir, :pid_file)
	)
end

def environment
	ENV['RACK_ENV'] || server_config[:environment]
end

def log_files
	File.join(__dir__, %w[log {stdout,stderr}])
end

def waiting_mailing_lock
	while Dir[File.join(__dir__, 'tmp', 'mailing_*')].any?
		puts "\e[31m\e[1mMails sending in progress!\e[22m\e[0m\nWaiting..."
		sleep 1
	end
end

def monitor_server
	bash "tail -f #{log_files}"
end

def bundle_check
	bash 'bundle check || bundle install'
end

def assets_build
	return true unless Dir.exist?(ASSETS_DIR)
	bash 'rake assets:build'
end

## Runtime
case ARGV[0]
when 'start'
	server :start
when 'stop'
	server :stop
when 'restart'
	server :restart
when 'kill'
	server :stop
	bash 'pkill -f filewatcher'
	bash 'pkill -f puma'
when 'monitor'
	monitor_server
when 'devel'
	server :restart
	if environment == 'production'
		puts 'Waiting for logs...'
		sleep 1.5
		monitor_server
	end
else
	puts "Unknown command #{ARGV[0]}"
	show_usage
end
