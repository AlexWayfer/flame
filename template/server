#!/usr/bin/env ruby

# frozen_string_literal: true

require 'shellwords'
require 'yaml'

## Functons
def show_usage
	puts <<~USAGE
		Usage: ./server COMMAND

		  COMMAND is one of:
		      start - Start server
		       stop - Stop server
		       kill - Kill server (and filewatcher)
		    restart - Restart server
		    monitor - Show log
		      devel - Restart and monitor server
		         ps - Show processes of server
	USAGE
end

def bash(command, print: true)
	puts command if print
	system bash_command(command)
end

def bash_command(command)
	escaped_command = Shellwords.escape(command)
	"bash -c #{escaped_command}"
end

def bash_spawn(command)
	puts "spawn #{command}"
	spawn bash_command command
end

def server(command)
	if %i[start restart].include?(command) &&
	   !(dependencies_check && assets_build)
		exit
	end
	if %i[stop restart].include?(command)
		kill_each read_filewatcher_pids
		delete_filewatcher_pids_file
	end
	web_server(command)
end

def web_server(command)
	pumactl_command = "bundle exec pumactl #{command} -F #{puma_config_file}"
	if environment == 'production' || command != :restart
		waiting_mailing_lock if %i[stop restart].include?(command)
		return bash pumactl_command
	end
	development_restart pumactl_command
end

def development_restart(pumactl_command)
	filewatcher_pids =
		development_filewatchers.map { |command| bash_spawn command }
	dump_filewatcher_pids filewatcher_pids
	# web_server :stop if File.exist? puma_pid_file
	# web_server :start
	File.exist?(puma_pid_file) ? bash(pumactl_command) : web_server(:start)
rescue SystemExit, Interrupt
	kill_each filewatcher_pids
	delete_filewatcher_pids_file
end

def kill_each(pids)
	Array(pids).each do |pid|
		bash "kill #{pid}"
	end
end

def filewatcher_command(pattern, execute, exclude: nil)
	<<-CMD.split.join(' ')
		bundle exec "
			filewatcher
				'#{pattern}'
				#{"--exclude '#{exclude}'" unless exclude.nil?}
				'#{execute}'
		"
	CMD
end

def development_filewatchers
	YAML.load_file(File.join(__dir__, 'filewatchers.yml')).map do |args|
		filewatcher_command args[:pattern], args[:command], exclude: args[:exclude]
	end
end

def dump_filewatcher_pids(filewatcher_pids)
	FileUtils.mkdir_p server_config_pids_dir
	File.write(
		filewatcher_pids_file,
		filewatcher_pids.join($RS)
	)
end

def read_filewatcher_pids
	return unless File.exist?(filewatcher_pids_file)
	File.read(filewatcher_pids_file).split($RS)
end

def delete_filewatcher_pids_file
	return unless File.exist?(filewatcher_pids_file)
	File.delete filewatcher_pids_file
end

def server_config
	@server_config ||= YAML.load_file(File.join(__dir__, 'config', 'server.yml'))
end

def puma_config_file
	@puma_config_file ||= File.join(__dir__, 'config', 'puma.rb')
end

def puma_pid_file
	File.join(
		__dir__, *server_config[environment].values_at(:pids_dir, :pid_file)
	)
end

def server_config_pids_dir
	server_config[environment][:pids_dir]
end

def filewatcher_pids_file
	File.join server_config_pids_dir, 'filewatcher.pids'
end

def environment
	ENV['RACK_ENV'] || server_config[:environment]
end

def log_files
	File.join(__dir__, %w[log {stdout,stderr}])
end

def waiting_mailing_lock
	while Dir[File.join(__dir__, 'tmp', 'mailing_*')].any?
		puts "\e[31m\e[1mMails sending in progress!\e[22m\e[0m\nWaiting..."
		sleep 1
	end
end

def monitor_server
	bash "tail -f #{log_files}"
end

def dependencies_check
	bash('bundle check || bundle install') # && bash('yarn install')
end

def assets_build
	bash 'rake assets:build', print: false
end

def ps_with_grep(pattern)
	bash "ps aux | grep #{pattern} --color", print: false
end

## Runtime
case ARGV[0]
when 'start'
	server :start
when 'stop'
	server :stop
when 'restart'
	server :restart
when 'kill'
	server :stop
	bash 'pkill -f filewatcher'
	bash 'pkill -f puma'
when 'monitor'
	monitor_server
when 'devel'
	server :restart
	if environment == 'production'
		puts 'Waiting for logs...'
		sleep 1.5
		monitor_server
	end
when 'ps'
	puts
	puts 'Filewatcher:'
	puts
	ps_with_grep '[f]ilewatcher'
	puts
	puts 'Puma:'
	puts
	ps_with_grep '[p]uma[\ :]'
else
	puts "Unknown command #{ARGV[0]}"
	puts
	show_usage
end
